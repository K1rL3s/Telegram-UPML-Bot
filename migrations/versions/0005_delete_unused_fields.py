"""delete unused fields

Revision ID: 0005
Revises: 0004
Create Date: 2023-11-08 00:17:32.669050

"""
import datetime as dt
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "0005"
down_revision: Union[str, None] = "0004"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "createad_time")
    op.drop_column("users", "modified_time")
    op.drop_column("laundries", "start_time")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "modified_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "createad_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "laundries",
        sa.Column(
            "start_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
    )

    users = sa.table(
        "users",
        sa.column("modified_time", sa.DateTime),
        sa.column("createad_time", sa.DateTime),
    )
    unix_start_time = dt.datetime(year=1970, month=1, day=1, hour=0, minute=0, second=0)
    op.execute(
        users.update().values(
            {
                "modified_time": unix_start_time,
                "createad_time": unix_start_time,
            },
        ),
    )
    op.alter_column("users", "modified_time", nullable=False)
    op.alter_column("users", "createad_time", nullable=False)
    # ### end Alembic commands ###
