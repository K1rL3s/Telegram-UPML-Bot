import asyncio
from typing import TYPE_CHECKING

from aiogram.exceptions import TelegramForbiddenError
from loguru import logger

from shared.utils.consts import NOTIFIES_PER_BATCH
from shared.utils.funcs import name_link, username_by_user_id

if TYPE_CHECKING:
    from aiogram import Bot
    from aiogram.types import InlineKeyboardMarkup

    from shared.database.models import User
    from shared.database.repository import UserRepository


async def do_one_notify(
    text: str,
    bot: "Bot",
    repo: "UserRepository",
    user: "User",
    keyboard: "InlineKeyboardMarkup" = None,
) -> bool:
    """
    –î–µ–ª–∞—Ç–µ–ª—å –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param user: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏.
    :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º.
    """
    try:
        await bot.send_message(text=text, chat_id=user.user_id, reply_markup=keyboard)
        logger.debug(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ [{short_info}]",
            short_info=user.short_info,
        )
    except TelegramForbiddenError:
        await repo.update(user.user_id, is_active=False)
        return False
    except Exception as e:
        logger.warning(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {err} [{short_info}]",
            err=e,
            short_info=user.short_info,
        )
        return False

    return True


async def do_many_notifies(
    text: str,
    users: list["User"],
    bot: "Bot",
    repo: "UserRepository",
) -> None:
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.

    :param text: –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.
    :param users: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–π—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞.
    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    for i in range(0, len(users), NOTIFIES_PER_BATCH):
        tasks = [
            asyncio.create_task(do_one_notify(text, bot, repo, user))
            for user in users[i : i + NOTIFIES_PER_BATCH]
        ]
        timer = asyncio.create_task(asyncio.sleep(1))
        await asyncio.gather(*tasks)
        await timer


async def do_admin_notify(
    text: str,
    users: list["User"],
    from_who: int,
    for_who: str,
    bot: "Bot",
    repo: "UserRepository",
) -> None:
    """
    –î–µ–ª–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :param users: –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param from_who: –¢–ì –ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∞)
    :param for_who: –î–ª—è –∫–æ–≥–æ —Ä–∞—Å—Å—ã–ª–∫–∞.
    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    username = await username_by_user_id(bot, from_who)
    text = (
        "üîî<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> "
        f"{name_link(username, from_who)} <b>{for_who}</b>\n\n" + text
    )
    await do_many_notifies(text, users, bot, repo)
