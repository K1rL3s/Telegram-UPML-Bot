from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup

from bot.keyboards import (
    admins_list_keyboard,
    cancel_state_keyboard,
    check_admin_roles_keyboard,
    edit_roles_keyboard,
)
from shared.database.repository import UserRepository, UserRoleRepository
from shared.utils.enums import RoleEnum
from shared.utils.funcs import name_link
from shared.utils.phrases import YES
from shared.utils.states import EditingRoles
from shared.utils.translate import ROLES_TRANSLATE


async def admins_list_func(
    page: int,
    repo: "UserRoleRepository",
) -> tuple[str, "InlineKeyboardMarkup"]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤".

    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    admins = [
        (user.username, user.user_id) for user in await repo.get_users_with_any_roles()
    ]

    text = "üëÆ‚Äç‚ôÄÔ∏è–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:"
    keyboard = admins_list_keyboard(admins, page)

    return text, keyboard


async def check_admin_roles_func(
    user_id: int,
    page: int,
    repo: "UserRepository",
) -> tuple[str, "InlineKeyboardMarkup"]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.

    :param user_id: –ê–π–¥–∏ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–º–æ—Ç—Ä—è—Ç.
    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –∞–¥–º–∏–Ω.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user = await repo.get(user_id)
    roles = [role.role for role in user.roles]

    text = f"–¢–µ–ª–µ–≥—Ä–∞–º - {name_link(user.username, user_id)}"
    keyboard = check_admin_roles_keyboard(user_id, page, roles)

    return text, keyboard


async def edit_role_directly_func(
    user_id: int,
    repo: "UserRepository",
    state: "FSMContext",
) -> tuple[str, "InlineKeyboardMarkup"]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–¥–º–∏–Ω–∞.

    :param user_id: –ê–π–¥–∏ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    username = (await repo.get(user_id)).username
    text, keyboard, _ = await edit_role_username_func(username, state, repo)
    return text, keyboard


async def edit_role_username_func(
    text: str,
    state: "FSMContext",
    repo: "UserRepository",
) -> tuple[str, "InlineKeyboardMarkup", int]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç—è—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏.

    :param text: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∞–π–¥–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
    """
    username = text.split("/")[-1].lstrip("@")

    if not (user_ids := await repo.get_user_ids_by_username(username)):
        text = "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É —Å–µ–±—è —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        return text, cancel_state_keyboard, -1

    # TODO: —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –±–¥ –µ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã
    if len(user_ids) > 1:
        pass

    user_id = user_ids[0]

    all_roles = RoleEnum.roles_which_can_be_edited()
    choosed_roles = [role.role for role in (await repo.get(user_id)).roles]
    await state.set_state(EditingRoles.roles)
    data = await state.update_data(
        user_id=user_id,
        username=username,
        all_roles=all_roles,
        choosed_roles=choosed_roles,
    )

    return (
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É {name_link(username, user_id)}",
        edit_roles_keyboard(all_roles, choosed_roles),
        data.get("start_id", -1),
    )


async def edit_role_choose_role_func(
    role: str,
    state: "FSMContext",
) -> tuple[str, "InlineKeyboardMarkup"]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ä–æ–ª—è–º–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param role: –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–π–¥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
    """
    data = await state.get_data()
    all_roles: list[str] = data["all_roles"]
    choosed_roles: list[str] = data["choosed_roles"]
    user_id: int = data["user_id"]
    username: str = data["username"]

    if role in choosed_roles:
        choosed_roles.remove(role)
    else:
        choosed_roles.append(role)

    await state.update_data(choosed_roles=choosed_roles)

    return (
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É {name_link(username, user_id)}",
        edit_roles_keyboard(all_roles, choosed_roles),
    )


async def edit_role_confirm_func(state: "FSMContext") -> str:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–µ–π.

    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–π–¥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
    """
    await state.set_state(EditingRoles.confirm)
    data = await state.get_data()
    user_id: int = data["user_id"]
    username: str = data["username"]
    choosed_roles: list[str] = data["choosed_roles"]

    foramtted_roles = (
        ", ".join(ROLES_TRANSLATE[role].capitalize() for role in choosed_roles)
        or "–ù–µ—Ç —Ä–æ–ª–µ–π"
    )
    return (
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —É {name_link(username, user_id)} –±—É–¥—É—Ç —Ä–æ–ª—å(-–∏):\n"
        f"{foramtted_roles} ?"
    )


async def edit_role_confirm_sure_func(
    state: "FSMContext",
    repo: "UserRoleRepository",
) -> str:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π.

    :param state: –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –∞–π–¥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.
    """
    data = await state.get_data()
    user_id: int = data["user_id"]
    choosed_roles: list[str] = data["choosed_roles"]

    await repo.remove_all_roles_from_user(user_id)
    for role in choosed_roles:
        await repo.add_role_to_user(user_id, role)

    return f"{YES} –£—Å–ø–µ—à–Ω–æ!"
