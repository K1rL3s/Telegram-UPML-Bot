from typing import TYPE_CHECKING

from aiogram.types import InputMediaPhoto

from bot.keyboards import lessons_keyboard
from shared.utils.datehelp import format_date, weekday_by_date
from shared.utils.phrases import QUESTION

if TYPE_CHECKING:
    import datetime as dt

    from aiogram import Bot

    from shared.database.repository.repository import Repository


async def send_lessons_images(
    user_id: int,
    chat_id: int,
    date: "dt.date",
    bot: "Bot",
    repo: "Repository",
) -> str | None:
    """
    –û–±—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–∞—Ä–∞–ª–µ–ª–ª–∏ –∏ –∫–ª–∞—Å—Å–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–≤—É—Ö –ø–∞—Ä–∞–ª–µ–ª–ª–µ–π, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å.

    :param user_id: –¢–ì –ê–π–¥–∏.
    :param chat_id: –ê–π–¥–∏ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param date: –î–∞—Ç–∞ —É—Ä–æ–∫–æ–≤.
    :param bot: –¢–ì –ë–æ—Ç.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text, images = await get_lessons_for_user(user_id, date, repo)

    if any(images):
        messages = await bot.send_media_group(
            chat_id=chat_id,
            media=[InputMediaPhoto(media=media_id) for media_id in images if media_id],
        )
        await messages[0].reply(text=text, reply_markup=lessons_keyboard(date))
        return

    return text


async def get_lessons_for_user(
    user_id: int,
    date: "dt.date",
    repo: "Repository",
) -> tuple[str, list[str | None]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É—Ä–æ–∫–æ–≤ –∏ –∞–π–¥–∏—à–Ω–∏–∫–∏ —Ñ–æ—Ç–æ.

    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω, —Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö –∞–π–¥–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–∞—Ä–∞–ª–µ–ª–ª–∏ –∏ –∫–ª–∞—Å—Å–∞.
    –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ –¥–≤—É—Ö –∞–π–¥–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–µ–π.
    –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –Ω–µ—Ç, —Ç–æ None.

    :param user_id: –ê–π–¥–∏ —é–∑–µ—Ä–∞.
    :param date: –î–∞—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    :param repo: –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ —Å –¥–≤—É–º—è –∞–π–¥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    settings = await repo.settings.get(user_id)

    if settings.class_:
        full_lessons = await repo.full_lessons.get(date, settings.grade)
        class_lessons = await repo.class_lessons.get(date, settings.class_)
        images = [
            getattr(full_lessons, "file_id", None),
            getattr(class_lessons, "file_id", None),
        ]
    else:
        full_10_lessons = await repo.full_lessons.get(date, "10")
        full_11_lessons = await repo.full_lessons.get(date, "11")
        images = [
            getattr(full_10_lessons, "file_id", None),
            getattr(full_11_lessons, "file_id", None),
        ]

    for_class = settings.class_ if settings.class_ else QUESTION
    if any(images):
        text = (
            f"‚úè –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{format_date(date)}</b> ({weekday_by_date(date)}) "
            f"–¥–ª—è <b>{for_class}</b> –∫–ª–∞—Å—Å–∞."
        )
    else:
        text = (
            f"üí§ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{format_date(date)}</b> ({weekday_by_date(date)}) "
            f"–¥–ª—è <b>{for_class}</b> –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :("
        )

    return text, images
