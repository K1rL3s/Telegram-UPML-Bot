import datetime as dt
from math import ceil
from typing import TYPE_CHECKING

from bot.keyboards import laundry_keyboard
from shared.utils.consts import REPEAT_LAUNDRY_TIMER
from shared.utils.datehelp import datetime_now, datetime_time_delta

if TYPE_CHECKING:
    from aiogram.types import InlineKeyboardMarkup

    from shared.database.models.laundries import Laundry
    from shared.database.repository import LaundryRepository, SettingsRepository


async def laundry_func(
    user_id: int,
    repo: "LaundryRepository",
) -> tuple[str, "InlineKeyboardMarkup"]:
    """
    –¢–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –ø—Ä–∞—á–µ—á–Ω–æ–π.

    :param user_id: –¢–ì –ê–π–¥–∏.
    :param repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∞—á–µ—á–Ω–æ–π.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    text = f"""üíß –Ø - —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∞—á–µ—á–Ω–æ–π.
–ü–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –µ—â—ë –¥–≤–∞ —Ä–∞–∑–∞ –Ω–∞ <b>{REPEAT_LAUNDRY_TIMER}</b> –º–∏–Ω—É—Ç
"""
    laundry = await repo.get(user_id)
    keyboard = await laundry_keyboard(laundry)

    if (minutes := await laundry_time_left(laundry)) is not None:
        text += f"\n\n–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä–∞: <b>~{minutes}</b> –º–∏–Ω—É—Ç"

    return text, keyboard


async def laundry_time_left(laundry: "Laundry") -> int | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∞—á–µ—á–Ω–æ–π.

    :param laundry: –ú–æ–¥–µ–ª—å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∞—á–µ—á–Ω–æ–π.
    :return: –ú–∏–Ω—É—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä–∞.
    """
    now = datetime_now()

    if (
        not laundry
        or not laundry.is_active
        or not laundry.end_time
        or laundry.end_time < now
    ):
        return None

    delta_time: dt.timedelta = laundry.end_time - now
    return ceil(delta_time.total_seconds() / 60)


async def laundry_start_timer_func(
    settings_repo: "SettingsRepository",
    laundry_repo: "LaundryRepository",
    user_id: int,
    attr: str,
) -> tuple[int, "dt.datetime"]:
    """
    –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∏—Ä–∫—É" –∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—É—à–∫—É".

    :param settings_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    :param laundry_repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∞—á–µ—á–Ω–æ–π.
    :param user_id: –¢–ì –ê–π–¥–∏.
    :param attr: C—Ç–∏—Ä–∫–∞ –∏–ª–∏ —Å—É—à–∫–∞.
    """
    settings = await settings_repo.get(user_id)

    start_time = datetime_now()
    if time := getattr(settings, f"{attr}_time"):
        timedelta = datetime_time_delta(start_time, time)
    else:
        timedelta = dt.timedelta(minutes=getattr(settings, f"{attr}_minutes"))

    end_time = (start_time + timedelta).replace(second=0, microsecond=0)

    await laundry_repo.save_or_update_to_db(
        user_id,
        start_time=start_time,
        end_time=end_time,
        is_active=True,
        rings=0,
    )

    return int(timedelta.total_seconds() // 60), end_time
